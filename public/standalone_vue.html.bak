<!DOCTYPE html>
<html>
  <head>
    <title>Warlocks Reach - Standalone Vue Version</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    
    <!-- Vue 3 from CDN -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    
    <style>
      body {
        margin: 0;
        overflow-y: auto;
        background-color: #282c34;
        color: white;
        font-family: 'Arial', sans-serif;
        min-height: 100vh;
      }
      
      .game-board {
        display: flex;
        flex-direction: column;
        height: 100vh;
      }
      
      .player-area, .bot-area {
        display: flex;
        flex-direction: column;
        height: 45%;
        padding: 20px;
        box-sizing: border-box;
      }
      
      .battlefield {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 70%;
      }
      
      .hand {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 10px;
      }
      
      .card {
        width: 110px;
        height: 160px;
        background-color: #444;
        border-radius: 8px;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 8px;
        box-sizing: border-box;
        transition: transform 0.2s;
        position: relative;
      }
      
      .card:hover {
        transform: translateY(-10px) scale(1.05);
      }
      
      .card-name {
        font-weight: bold;
        margin: 5px 0;
        text-align: center;
        font-size: 1.1em;
        width: 100%;
      }
      
      .card-stats {
        display: flex;
        justify-content: space-between;
        width: 100%;
        padding: 0 5px;
        margin: 5px 0;
        font-size: 1.2em;
      }
      
      .attack, .defense {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
      }
      
      .attack {
        background-color: #d9534f;
      }
      
      .defense {
        background-color: #5bc0de;
      }
      
      .card-mana {
        font-size: 0.9em;
        color: #ffd700;
        margin: 5px 0;
        padding: 2px 6px;
        background-color: rgba(0, 0, 0, 0.3);
        border-radius: 3px;
      }

      /* Card ability styles */
      .card-ability {
        width: calc(100% - 10px);
        background-color: rgba(0, 0, 0, 0.7);
        border-radius: 4px;
        padding: 4px 6px;
        font-size: 0.8em;
        display: flex;
        align-items: center;
        gap: 6px;
        margin-top: auto;
      }

      .ability-icon {
        min-width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        font-size: 1.2em;
        flex-shrink: 0;
      }

      .ability-icon.damageOpponentHand {
        background-color: rgba(217, 83, 79, 0.3);
        color: #ff4444;
      }

      .ability-icon.buffOwnHand {
        background-color: rgba(92, 184, 92, 0.3);
        color: #5cb85c;
      }

      .ability-icon.protectHand {
        background-color: rgba(91, 192, 222, 0.3);
        color: #5bc0de;
      }

      .ability-text {
        flex: 1;
        color: #fff;
        text-align: left;
        line-height: 1.2;
        font-size: 0.9em;
        word-wrap: break-word;
      }

      .protection-status {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: rgba(91, 192, 222, 0.3);
        color: #5bc0de;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 0.7em;
      }
      
      .health-bar {
        width: 100%;
        height: 20px;
        background-color: #333;
        border-radius: 10px;
        margin: 10px 0;
        overflow: hidden;
      }
      
      .health-fill {
        height: 100%;
        background-color: #5cb85c;
      }
      
      .game-menu {
        text-align: center;
        padding: 20px;
      }
      
      .btn {
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        margin: 10px;
        cursor: pointer;
        border: none;
        font-size: 16px;
      }
      
      .btn:hover {
        background-color: #0056b3;
      }

      /* Main menu styles */
      .main-menu {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background-color: #1a1a2e;
      }
      
      .main-menu h1 {
        font-size: 3rem;
        margin-bottom: 20px;
        color: #61dafb;
      }
      
      .main-menu p {
        font-size: 1.2rem;
        line-height: 1.6;
        margin-bottom: 30px;
        max-width: 600px;
        text-align: center;
      }
      
      .menu-cards {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin: 40px 0;
        flex-wrap: wrap;
      }
      
      .menu-card {
        width: 150px;
        height: 220px;
        background-color: #444;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        padding: 15px;
        transition: transform 0.3s;
      }
      
      .menu-card:hover {
        transform: translateY(-10px) scale(1.05);
      }
      
      .card-image {
        width: 120px;
        height: 120px;
        background-color: #666;
        border-radius: 5px;
      }

      /* Error message styling */
      .error-message {
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
        text-align: center;
      }
      
      /* 2D Battlefield with 2.5D effects */
      .battlefield-2d {
        width: 100%;
        height: 220px;
        background: linear-gradient(to bottom, #1f402d, #2a623d, #1f402d);
        position: relative;
        border-radius: 10px;
        margin: 12px 0;
        display: flex;
        justify-content: center;
        align-items: center;
        box-shadow: 0 10px 20px rgba(0,0,0,0.4);
        transform: perspective(1000px) rotateX(10deg);
        overflow: hidden;
      }
      
      .battlefield-2d::before {
        content: '';
        position: absolute;
        width: 90%;
        height: 1px;
        background: rgba(255,255,255,0.3);
        top: 50%;
        left: 5%;
        box-shadow: 0 0 10px rgba(255,255,255,0.5);
      }
      
      .battlefield-2d::after {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        background: url("data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.05' fill-rule='evenodd'%3E%3Cpath d='M0 20L20 0L40 20L20 40z' /%3E%3C/g%3E%3C/svg%3E");
        pointer-events: none;
      }
      
      .battlefield-2d-card {
        width: 70px;
        height: 100px;
        background: linear-gradient(135deg, #555, #444, #333);
        border-radius: 5px;
        position: absolute;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        box-shadow: 0 4px 15px rgba(0,0,0,0.4), inset 0 1px 1px rgba(255,255,255,0.2);
        transform-style: preserve-3d;
        transform: translateZ(10px);
        transition: transform 0.3s ease;
      }
      
      .battlefield-2d-card:hover {
        transform: translateZ(20px) scale(1.05);
      }

      /* Combat log styling - completely collapsed by default */
      .combat-log {
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 0;
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        max-height: 30px; /* Just enough for the title */
        overflow: hidden;
        z-index: 100;
        font-size: 14px;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.5);
        transition: max-height 0.3s ease, background-color 0.3s ease;
      }
      
      .combat-log.expanded {
        max-height: 250px;
        background-color: rgba(0, 0, 0, 0.9);
        overflow-y: auto;
        padding-bottom: 10px;
      }
      
      .combat-log-title {
        font-weight: bold;
        text-align: center;
        padding: 6px 0;
        margin: 0;
        position: sticky;
        top: 0;
        background-color: inherit;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        z-index: 1;
        cursor: pointer;
        user-select: none;
        transition: color 0.2s ease;
      }
      
      .combat-log-title:hover {
        color: #61dafb;
      }
      
      .combat-log-entries {
        padding: 8px 10px;
        max-height: calc(100% - 30px);
        overflow-y: auto;
        display: none;
      }
      
      .combat-log.expanded .combat-log-entries {
        display: block;
      }
      
      .combat-log-entry {
        margin-bottom: 5px;
        padding: 3px 10px;
        border-radius: 3px;
        opacity: 0.8;
      }
      
      .combat-log-entry:hover {
        opacity: 1;
      }
      
      .combat-log-entry.player-win {
        background-color: rgba(92, 184, 92, 0.3);
      }
      
      .combat-log-entry.bot-win {
        background-color: rgba(217, 83, 79, 0.3);
      }
      
      .combat-log-entry.direct-damage {
        background-color: rgba(240, 173, 78, 0.3);
      }
      
      .health-display {
        position: absolute;
        right: 10px;
        font-size: 24px;
        font-weight: bold;
        padding: 5px 10px;
        border-radius: 5px;
        background-color: rgba(0, 0, 0, 0.7);
      }
      
      .player-health {
        bottom: 10px;
        color: #5cb85c;
      }
      
      .bot-health {
        top: 10px;
        color: #d9534f;
      }

      /* Combat animation styling */
      .combat-animation {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 100;
      }
      
      .damage-number {
        position: absolute;
        color: white;
        font-weight: bold;
        font-size: 24px;
        text-shadow: 0 0 5px black;
        animation: damage-float 1.5s forwards;
      }
      
      @keyframes damage-float {
        0% {
          opacity: 1;
          transform: translateY(0);
        }
        100% {
          opacity: 0;
          transform: translateY(-50px);
        }
      }
      
      .card-clash {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 36px;
        font-weight: bold;
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.7);
        animation: clash-pulse 0.8s ease-out;
      }
      
      @keyframes clash-pulse {
        0% {
          opacity: 0;
          transform: translate(-50%, -50%) scale(0.5);
        }
        50% {
          opacity: 1;
          transform: translate(-50%, -50%) scale(1.2);
        }
        100% {
          opacity: 0;
          transform: translate(-50%, -50%) scale(1.5);
        }
      }

      .game-container {
        display: flex;
        flex-direction: column;
        max-width: 1000px;
        margin: 0 auto;
        padding: 15px;
        min-height: calc(100vh - 40px);
        margin-bottom: 40px;
      }

      .bot-section, .player-section {
        display: flex;
        flex-direction: column;
        margin-bottom: 12px;
      }

      .bot-stats, .player-stats {
        display: flex;
        justify-content: space-around;
        background-color: rgba(0,0,0,0.6);
        padding: 6px;
        border-radius: 5px;
        color: white;
        margin-bottom: 8px;
      }

      .bot-board, .player-board {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
        justify-content: center;
        padding: 8px;
        background: rgba(0,0,0,0.2);
        border-radius: 8px;
        min-height: 100px;
        max-height: 250px;
        overflow-y: auto;
      }

      .player-hand {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
        justify-content: center;
        padding: 8px;
        background: rgba(0,0,0,0.3);
        border-radius: 8px;
        min-height: 100px;
        max-height: 250px;
        overflow-y: auto;
      }

      .message-container {
        position: absolute;
        bottom: 10px;
        left: 0;
        right: 0;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        z-index: 5;
      }

      .message {
        color: white;
        text-align: center;
        max-width: 70%;
        margin-right: 15px;
        min-height: unset;
        margin-bottom: 0;
        padding: 8px 15px;
        background-color: rgba(0,0,0,0.7);
        border-radius: 5px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        box-shadow: 0 2px 8px rgba(0,0,0,0.5);
      }
      
      .btn.battlefield-btn {
        background-color: rgba(0, 123, 255, 0.8);
        margin: 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.5);
      }

      /* Add responsive adjustments for smaller screens */
      @media (max-height: 800px) {
        .battlefield-2d {
          height: 150px;
          margin: 10px 0;
        }
        
        .bot-section, .player-section {
          margin-bottom: 10px;
        }
        
        .message-container {
          margin: 5px 0;
        }

        .message {
          max-width: 60%;
          padding: 6px 12px;
          font-size: 14px;
        }

        .btn {
          padding: 6px 12px;
          font-size: 13px;
        }
      }

      @media (max-width: 600px) {
        .message {
          max-width: 50%;
          font-size: 13px;
        }
      }

      /* Battle animations */
      @keyframes card-attack {
        0% { transform: translateZ(10px); }
        40% { transform: translateZ(30px) translateX(30px); }
        60% { transform: translateZ(30px) translateX(-10px); }
        100% { transform: translateZ(10px); }
      }

      @keyframes card-defend {
        0% { transform: translateZ(10px); }
        40% { transform: translateZ(30px) translateX(-30px); }
        60% { transform: translateZ(30px) translateX(10px); }
        100% { transform: translateZ(10px); }
      }

      @keyframes card-shake {
        0% { transform: translateZ(10px) rotate(0deg); }
        20% { transform: translateZ(10px) rotate(-3deg); }
        40% { transform: translateZ(10px) rotate(3deg); }
        60% { transform: translateZ(10px) rotate(-3deg); }
        80% { transform: translateZ(10px) rotate(3deg); }
        100% { transform: translateZ(10px) rotate(0deg); }
      }

      @keyframes card-flash {
        0% { filter: brightness(1); }
        50% { filter: brightness(2) drop-shadow(0 0 15px rgba(255, 255, 150, 0.8)); }
        100% { filter: brightness(1); }
      }

      @keyframes clash-explosion {
        0% { 
          transform: translate(-50%, -50%) scale(0.1);
          opacity: 0;
        }
        10% { 
          transform: translate(-50%, -50%) scale(0.5);
          opacity: 1;
        }
        50% { 
          transform: translate(-50%, -50%) scale(1);
          opacity: 1;
        }
        100% { 
          transform: translate(-50%, -50%) scale(2);
          opacity: 0;
        }
      }

      @keyframes damage-number {
        0% {
          opacity: 0;
          transform: translate(-50%, -50%) scale(0.5);
        }
        10% {
          opacity: 1;
          transform: translate(-50%, -50%) scale(1.5);
        }
        20% {
          transform: translate(-50%, -50%) scale(1);
        }
        80% {
          opacity: 1;
          transform: translate(-50%, -50%) translateY(-50px) scale(1);
        }
        100% {
          opacity: 0;
          transform: translate(-50%, -50%) translateY(-100px) scale(0.8);
        }
      }

      .battlefield-2d-card.attacking {
        animation: card-attack 0.8s ease-out, card-flash 0.8s ease-out;
        z-index: 10;
      }

      .battlefield-2d-card.defending {
        animation: card-defend 0.8s ease-out, card-flash 0.8s ease-out;
        z-index: 5;
      }

      .battlefield-2d-card.damaged {
        animation: card-shake 0.5s ease-out;
      }

      .clash-effect {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 150px;
        height: 150px;
        background: radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(255,200,100,0.6) 50%, rgba(255,100,50,0) 100%);
        border-radius: 50%;
        transform: translate(-50%, -50%) scale(0);
        opacity: 0;
        pointer-events: none;
        z-index: 100;
        animation: clash-explosion 0.7s ease-out forwards;
      }

      .damage-number {
        position: absolute;
        top: 50%;
        left: 50%;
        font-size: 36px;
        font-weight: bold;
        color: white;
        text-shadow: 
          0 0 5px rgba(0,0,0,0.8),
          0 0 10px rgba(0,0,0,0.5),
          0 0 15px rgba(255,0,0,0.5);
        pointer-events: none;
        z-index: 110;
        animation: damage-number 1.5s ease-out forwards;
      }

      .damage-number.attack {
        color: #ff5555;
      }

      .damage-number.defense {
        color: #55aaff;
      }

      /* Direct damage animations */
      @keyframes health-damage {
        0% { transform: scale(1); color: inherit; }
        50% { transform: scale(1.3); color: #ff5555; }
        100% { transform: scale(1); color: inherit; }
      }

      @keyframes direct-damage-flash {
        0% { 
          filter: brightness(1); 
          box-shadow: 0 0 0 rgba(255, 100, 100, 0);
        }
        50% { 
          filter: brightness(1.5); 
          box-shadow: 0 0 20px rgba(255, 100, 100, 0.8);
        }
        100% { 
          filter: brightness(1); 
          box-shadow: 0 0 0 rgba(255, 100, 100, 0);
        }
      }

      @keyframes direct-attack-rays {
        0% {
          opacity: 0;
          transform: scale(0.2);
        }
        50% {
          opacity: 1;
          transform: scale(1);
        }
        100% {
          opacity: 0;
          transform: scale(1.5);
        }
      }

      .direct-damage-effect {
        position: absolute;
        left: 0;
        right: 0;
        width: 100%;
        height: 100%;
        top: 0;
        pointer-events: none;
        z-index: 90;
        animation: direct-damage-flash 1s ease-out;
      }

      .direct-damage-rays {
        position: absolute;
        width: 300px;
        height: 300px;
        background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill='%23ff5555' fill-opacity='0.8'%3E%3Cpath d='M50 0 L52 45 L55 45 L50 100 L48 55 L45 55 Z'/%3E%3Cpath transform='rotate(45)' d='M50 0 L52 45 L55 45 L50 100 L48 55 L45 55 Z'/%3E%3Cpath transform='rotate(90)' d='M50 0 L52 45 L55 45 L50 100 L48 55 L45 55 Z'/%3E%3Cpath transform='rotate(135)' d='M50 0 L52 45 L55 45 L50 100 L48 55 L45 55 Z'/%3E%3C/g%3E%3C/svg%3E") center/contain no-repeat;
        transform: scale(0);
        opacity: 0;
        pointer-events: none;
        z-index: 95;
        animation: direct-attack-rays 1.5s ease-out;
      }

      .health-damage {
        animation: health-damage 0.8s ease-out;
      }
    </style>
  </head>
  <body>
    <div id="app"></div>
    
    <!-- Vue application -->
    <script>
      const { createApp, ref, reactive, computed, onMounted, watch } = Vue;
      
      // Card component
      const CardComponent = {
        props: {
          card: {
            type: Object,
            required: true
          },
          location: {
            type: String,
            default: 'hand'
          }
        },
        template: `
          <div class="card" :class="{'bot-card': location === 'bot-board'}" @click="$emit('click')">
            <div class="card-name">{{ card.name }}</div>
            <div class="card-stats">{{ card.attack }}/{{ card.defense }}</div>
            <div class="card-mana">Cost: {{ card.manaCost }}</div>
            <div v-if="card.ability" class="card-ability">
              <div class="ability-icon" :class="card.ability.type">
                <span v-html="getAbilityIcon(card.ability.type)"></span>
              </div>
              <div class="ability-text">{{ getAbilityText(card.ability) }}</div>
            </div>
            <div v-if="card.status?.protected" class="protection-status">
              Protected ({{ card.status.protected }})
            </div>
          </div>
        `,
        methods: {
          getAbilityIcon(type) {
            switch(type) {
              case 'damageOpponentHand': return '&#9889;';  // lightning bolt
              case 'buffOwnHand': return '&#8593;';         // up arrow
              case 'protectHand': return '&#128737;';       // shield
              default: return '&#10022;';                   // star
            }
          },
          getAbilityText(ability) {
            switch(ability.type) {
              case 'damageOpponentHand': return `Deal ${ability.value} damage to opponent's hand`;
              case 'buffOwnHand': return `+${ability.value} to hand cards`;
              case 'protectHand': return `Protect hand for ${ability.value} turns`;
              default: return '';
            }
          }
        }
      };
      
      // Combat Log component
      const CombatLog = {
        props: {
          logs: {
            type: Array,
            default: () => []
          }
        },
        data() {
          return {
            expanded: false
          };
        },
        methods: {
          toggleExpanded() {
            this.expanded = !this.expanded;
          }
        },
        template: `
          <div class="combat-log" :class="{ 'expanded': expanded }">
            <div class="combat-log-title" @click="toggleExpanded">
              Combat Log <span v-html="expanded ? '&darr;' : '&uarr;'"></span>
            </div>
            <div class="combat-log-entries">
              <div 
                v-for="(log, index) in logs" 
                :key="index" 
                class="combat-log-entry" 
                :class="{
                  'player-win': log.type === 'player-win',
                  'bot-win': log.type === 'bot-win',
                  'direct-damage': log.type === 'direct-damage'
                }"
              >
                {{ log.message }}
              </div>
            </div>
          </div>
        `
      };

      // Game Board component
      const GameBoard = {
        props: {
          gameState: {
            type: Object,
            required: true
          },
          message: {
            type: String,
            default: ''
          },
          combatLog: {
            type: Array,
            default: () => []
          }
        },
        components: {
          CardComponent,
          CombatLog
        },
        emits: ['card-play', 'end-turn', 'select-attacker', 'select-defender'],
        template: `
          <div>
            <div class="game-container">
              <div class="bot-section">
                <div class="bot-stats">
                  <div class="health">Bot Health: {{ gameState.bot.health }}</div>
                  <div class="mana">Bot Mana: {{ gameState.bot.mana }}</div>
                </div>
                <div class="bot-board">
                  <card-component
                    v-for="(card, index) in gameState.bot.board"
                    :key="'bot-card-' + card.name + '-' + index + '-' + card.defense"
                    :card="card"
                    location="bot-board"
                    @click="$emit('select-defender', index)"
                  />
                </div>
              </div>

              <div class="battlefield-2d">
                <div 
                  v-for="(card, index) in gameState.bot.board" 
                  :key="'bf-bot-' + index" 
                  class="battlefield-2d-card" 
                  :style="{ left: (50 + index * 80) + 'px', top: '50px' }"
                >
                  {{ card.attack }}/{{ card.defense }}
                </div>
                <div 
                  v-for="(card, index) in gameState.player.board" 
                  :key="'bf-player-' + index" 
                  class="battlefield-2d-card" 
                  :style="{ left: (50 + index * 80) + 'px', bottom: '50px' }"
                >
                  {{ card.attack }}/{{ card.defense }}
                </div>
                <div class="message-container">
                  <div class="message">{{ message }}</div>
                  <button class="btn battlefield-btn" @click="$emit('end-turn')">End Turn</button>
                </div>
              </div>

              <div class="player-section">
                <div class="player-board">
                  <card-component
                    v-for="(card, index) in gameState.player.board"
                    :key="'player-card-' + card.name + '-' + index + '-' + card.defense"
                    :card="card"
                    location="player-board"
                    @click="$emit('select-attacker', index)"
                  />
                </div>
                <div class="player-hand">
                  <card-component
                    v-for="(card, index) in gameState.player.hand"
                    :key="'hand-card-' + card.name + '-' + index"
                    :card="card"
                    location="hand"
                    @click="$emit('card-play', index)"
                  />
                </div>
                <div class="player-stats">
                  <div class="health">Your Health: {{ gameState.player.health }}</div>
                  <div class="mana">Your Mana: {{ gameState.player.mana }}</div>
                </div>
              </div>
              
              <!-- Add a spacer to ensure bottom margin -->
              <div style="height: 40px; width: 100%;"></div>
            </div>
            
            <!-- Combat log moved outside game container and fixed at bottom -->
            <combat-log :logs="combatLog" />
          </div>
        `
      };

      // Main Menu component
      const MainMenu = {
        emits: ['start-game'],
        setup(props, { emit }) {
          const sampleCards = [
            { name: "Firebolt", attack: 3, defense: 2, manaCost: 2 },
            { name: "Frost Giant", attack: 5, defense: 5, manaCost: 6 },
            { name: "Shadow Assassin", attack: 4, defense: 2, manaCost: 3 },
            { name: "Healing Cleric", attack: 1, defense: 3, manaCost: 2 },
          ];
          
          return {
            sampleCards,
            startGame: () => emit('start-game')
          };
        },
        template: `
          <div class="main-menu">
            <h1>Warlocks Reach</h1>
            <p>A standalone card game where magic and strategy collide. Build your deck, summon creatures, and defeat your opponent.</p>
            
            <div class="menu-cards">
              <div v-for="(card, index) in sampleCards" :key="index" class="menu-card">
                <div class="card-name">{{ card.name }}</div>
                <div class="card-stats">ATK: {{ card.attack }} | DEF: {{ card.defense }}</div>
                <div class="card-mana">Mana Cost: {{ card.manaCost }}</div>
              </div>
            </div>
            
            <button class="btn" @click="startGame">Start Game</button>
          </div>
        `
      };
      
      // Main App component
      const App = {
        components: {
          MainMenu,
          Game
        },
        setup() {
          const screen = ref('menu'); // 'menu' or 'game'
          
          const startGame = () => {
            screen.value = 'game';
          };
          
          const backToMenu = () => {
            screen.value = 'menu';
          };
          
          return {
            screen,
            startGame,
            backToMenu
          };
        },
        template: `
          <main-menu v-if="screen === 'menu'" @start-game="startGame" />
          <game v-else @back-to-menu="backToMenu" />
        `
      };
      
      const app = createApp(App);
      app.component('card-component', CardComponent);
      app.component('combat-log', CombatLog);
      app.component('game-board', GameBoard);
      app.component('main-menu', MainMenu);
      app.component('game', Game);
      app.mount('#app');
    </script>
  </body>
</html>